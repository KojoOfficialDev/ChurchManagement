import classNames from "classnames";
import { ReactNode } from "react";
import { uuid } from "../../core/utility";

type IProp = {
    type: 'info' | 'error' | 'success' | 'warning' | 'none';
    title: string;
    children?: ReactNode;
    closable?: boolean;
    onClose?: () => void
}
export const Alert = ({ ...prop }: IProp) => {
    prop.closable ??= true;

    const id = "alert_" + uuid();

    const onCloseTrigger = (e: any) => {
        if (prop?.onClose) prop.onClose();
        document.getElementById(id)?.remove();
        e.preventDefault();
    }

    return <>
        <div id={id} className={classNames(
            { 'bg-teal-100 border-teal-500 text-teal-900': prop.type == 'success' },
            { 'bg-red-100 border-red-500 text-red-900': prop.type == 'error' },
            { 'bg-blue-100 border-blue-500 text-blue-900': prop.type == 'info' },
            { 'bg-orange-100 border-orange-500 text-orange-900': prop.type == 'warning' },
            'rounded-md border-t-4 rounded-b  px-4 py-3 shadow-md'
        )} role="alert">
            <div className="flex">
                <div className="py-1">
                    <svg className={classNames(
                        { 'text-teal-500': prop.type == 'success' },
                        { 'text-red-500': prop.type == 'error' },
                        { 'text-blue-500': prop.type == 'info' },
                        { 'text-orange-500': prop.type == 'warning' },
                        'fill-current h-6 w-6  mr-4 animate-pulse'
                    )} xmlns="http://www.w3.org/2000/svg" viewBox={classNames(
                        { "0 0 20 20": prop.type == 'info' },
                        { "0 0 24 24": prop.type == 'warning' },
                        { "0 0 52 52": prop.type == 'error' },
                        { "0 0 512 512": prop.type == 'success' }
                    )}>
                        {prop.type == 'info' ? <>
                            <path d="M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z" />
                        </> : null}
                        {prop.type == 'error' ? <>
                            <path d="M26,2C12.8,2,2,12.8,2,26s10.8,24,24,24s24-10.8,24-24S39.2,2,26,2z M8,26c0-9.9,8.1-18,18-18 c3.9,0,7.5,1.2,10.4,3.3L11.3,36.4C9.2,33.5,8,29.9,8,26z M26,44c-3.9,0-7.5-1.2-10.4-3.3c5.1-5.1,19.3-19.3,25.1-25.1 C42.8,18.5,44,22.1,44,26C44,35.9,35.9,44,26,44z" />
                        </> : null}
                        {prop.type == 'warning' ? <>
                            <g>
                                <path d="M12 13.75C11.59 13.75 11.25 13.41 11.25 13V7.75C11.25 7.34 11.59 7 12 7C12.41 7 12.75 7.34 12.75 7.75V13C12.75 13.41 12.41 13.75 12 13.75Z" ></path>
                                <path d="M12 17.25C11.73 17.25 11.48 17.15 11.29 16.96C11.2 16.86 11.13 16.75 11.07 16.63C11.02 16.51 11 16.38 11 16.25C11 15.99 11.11 15.73 11.29 15.54C11.66 15.17 12.34 15.17 12.71 15.54C12.89 15.73 13 15.99 13 16.25C13 16.38 12.97 16.51 12.92 16.63C12.87 16.75 12.8 16.86 12.71 16.96C12.52 17.15 12.27 17.25 12 17.25Z" ></path>
                                <path d="M12.0002 22.75C11.3302 22.75 10.6502 22.58 10.0502 22.23L4.11017 18.8C2.91017 18.1 2.16016 16.81 2.16016 15.42V8.57999C2.16016 7.18999 2.91017 5.89999 4.11017 5.19999L10.0502 1.77C11.2502 1.07 12.7402 1.07 13.9502 1.77L19.8902 5.19999C21.0902 5.89999 21.8402 7.18999 21.8402 8.57999V15.42C21.8402 16.81 21.0902 18.1 19.8902 18.8L13.9502 22.23C13.3502 22.58 12.6702 22.75 12.0002 22.75ZM12.0002 2.74998C11.5902 2.74998 11.1702 2.85998 10.8002 3.06998L4.86017 6.49998C4.12017 6.92998 3.66016 7.71999 3.66016 8.57999V15.42C3.66016 16.27 4.12017 17.07 4.86017 17.5L10.8002 20.93C11.5402 21.36 12.4602 21.36 13.1902 20.93L19.1302 17.5C19.8702 17.07 20.3302 16.28 20.3302 15.42V8.57999C20.3302 7.72999 19.8702 6.92998 19.1302 6.49998L13.1902 3.06998C12.8302 2.85998 12.4102 2.74998 12.0002 2.74998Z" ></path>
                            </g>
                        </> : null}
                        {prop.type == 'success' ? <>
                            <g>
                                <path d="M437.016,74.984c-99.979-99.979-262.075-99.979-362.033,0.002c-99.978,99.978-99.978,262.073,0.004,362.031 c99.954,99.978,262.05,99.978,362.029-0.002C536.995,337.059,536.995,174.964,437.016,74.984z M406.848,406.844 c-83.318,83.318-218.396,83.318-301.691,0.004c-83.318-83.299-83.318-218.377-0.002-301.693 c83.297-83.317,218.375-83.317,301.691,0S490.162,323.549,406.848,406.844z"></path>
                                <path d="M368.911,155.586L234.663,289.834l-70.248-70.248c-8.331-8.331-21.839-8.331-30.17,0s-8.331,21.839,0,30.17 l85.333,85.333c8.331,8.331,21.839,8.331,30.17,0l149.333-149.333c8.331-8.331,8.331-21.839,0-30.17 S377.242,147.255,368.911,155.586z"></path>
                            </g>
                        </> : null}
                    </svg>
                </div>
                <div className="flex-col flex-grow">
                    <p className="font-medium">{prop.title}</p>
                    <p className="text-[12px] font-light">{prop.children}</p>
                </div>
                {prop.closable ?
                    <div>
                        <button onClick={onCloseTrigger} className={classNames(
                            { 'hover:bg-teal-500': prop.type == 'success' },
                            { 'hover:bg-red-500': prop.type == 'error' },
                            { 'hover:bg-blue-500': prop.type == 'info' },
                            { 'hover:bg-orange-500': prop.type == 'warning' },
                            'p-2 rounded-full hover:text-white'
                        )}>
                            <svg className="w-3 h-3" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M0.92524 0.687069C1.126 0.486219 1.39823 0.373377 1.68209 0.373377C1.96597 0.373377 2.2382 0.486219 2.43894 0.687069L8.10514 6.35813L13.7714 0.687069C13.8701 0.584748 13.9882 0.503105 14.1188 0.446962C14.2494 0.39082 14.3899 0.361248 14.5321 0.360026C14.6742 0.358783 14.8151 0.38589 14.9468 0.439762C15.0782 0.493633 15.1977 0.573197 15.2983 0.673783C15.3987 0.774389 15.4784 0.894026 15.5321 1.02568C15.5859 1.15736 15.6131 1.29845 15.6118 1.44071C15.6105 1.58297 15.5809 1.72357 15.5248 1.85428C15.4688 1.98499 15.3872 2.10324 15.2851 2.20206L9.61883 7.87312L15.2851 13.5441C15.4801 13.7462 15.588 14.0168 15.5854 14.2977C15.5831 14.5787 15.4705 14.8474 15.272 15.046C15.0735 15.2449 14.805 15.3574 14.5244 15.3599C14.2437 15.3623 13.9733 15.2543 13.7714 15.0591L8.10514 9.38812L2.43894 15.0591C2.23704 15.2543 1.96663 15.3623 1.68594 15.3599C1.40526 15.3574 1.13677 15.2449 0.938279 15.046C0.739807 14.8474 0.627232 14.5787 0.624791 14.2977C0.62235 14.0168 0.730236 13.7462 0.92524 13.5441L6.59144 7.87312L0.92524 2.20206C0.724562 2.00115 0.611816 1.72867 0.611816 1.44457C0.611816 1.16047 0.724562 0.887983 0.92524 0.687069Z" fill="currentColor" />
                            </svg>
                        </button>
                    </div>
                    : null}

            </div>
        </div>
    </>
}